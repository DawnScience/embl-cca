#
# Makefile for PilatusLoader library called from Java
#
#Makefile.env for specifying environment dependent include paths

include Makefile.env
include Makefile.shared

SHELL := /bin/bash
# Package information
LIBVER := 1
LIBREV := 0
# Targets
Osbits2dirname = $(subst 64,linux-x86_64,$(subst 32,linux-x86,$(1)))

INC_DIR := .
OBJ_DIR := output
OBJ_DIR_OSBITS := $(OBJ_DIR)$(OSBITS)
CSTAR_FILES := test.cpp CallTrace.cpp ExceptionWCT.cpp String.cpp
OBJFILES := $(CSTAR_FILES:.cpp=.o)
DEP1FILES := $(CSTAR_FILES:.cpp=.d1)
DEP2FILES := $(CSTAR_FILES:.cpp=.d2)
OBJFILES_OSBITS := $(addprefix $(OBJ_DIR_OSBITS)/,$(OBJFILES))
DEP1FILES_OSBITS := $(addprefix $(OBJ_DIR_OSBITS)/,$(DEP1FILES))
DEP2FILES_OSBITS := $(addprefix $(OBJ_DIR_OSBITS)/,$(DEP2FILES))
.SECONDARY: $(DEP1FILES_OSBITS)

# Targets
LIBFILES := libemblutils.a
LIBFILES_OSBITS := $(addprefix $(OBJ_DIR_OSBITS)/,$(LIBFILES))
LIBFILES_TARGET_DIR := ../lib
LIBFILES_TARGET := $(addprefix $(LIBFILES_TARGET_DIR)/$(call Osbits2dirname,$(OSBITS))/,$(LIBFILES))
TEST_TARGET := test
TEST_TARGET_OSBITS := $(OBJ_DIR_OSBITS)/$(TEST_TARGET)

# Building configuration
AR := /usr/bin/ar
CC := gcc
CFLAGS := -std=c99
CXXFLAGS :=
CPPFLAGS := -I$(JAVA_INCLUDE) -I$(JAVA_LINUXINCLUDE) -I$(BOOST_INCLUDE) -I. \
-Wall -fPIC -fsigned-char -O2 -D_GNU_SOURCE=1
ALL_CFLAGS := $(CXXFLAGS) $(CPPFLAGS) -m$(OSBITS) -I$(INC_DIR)
MAKEOBJECT = $(CC) -c $(ALL_CFLAGS) -o $@ $<

LIBS := -lz -lpthread -lm -lc -lstdc++ -lboost_regex
#LIBDIR := ../CBFlib/lib/$(call Osbits2dirname,$(OSBITS))
LDFLAGS := -L$(LIBDIR)
LDENV :=

LIBLDFLAGS = -shared -Wl,-rpath,$(OBJ_DIR_OSBITS)

ifneq (,$(filter all32 all64 all, $(MAKECMDGOALS)))
-include $(DEP1FILES_OSBITS)
endif

ifneq (,$(filter all32 all64 all, $(MAKECMDGOALS)))
-include $(DEP2FILES_OSBITS)
endif

#================================================================
# Actions
#================================================================

.PHONY: all all32 all64
all : dirs all$(OSBITS)
all32 all64 : $(LIBFILES_TARGET) $(TEST_TARGET_OSBITS)

$(LIBFILES_TARGET_DIR)/$(call Osbits2dirname,$(OSBITS))/%.a : $(addprefix $(OBJ_DIR_OSBITS)/,%.a)
	@mkdir -p $(LIBFILES_TARGET_DIR)/$(call Osbits2dirname,$(OSBITS))
	cp -df -t $(LIBFILES_TARGET_DIR)/$(call Osbits2dirname,$(OSBITS)) $<

.PHONY: clean clean32 clean64
clean : clean32 clean64
clean32 clean64 :
	rm -rf \
	$(addprefix $(OBJ_DIR)$(subst clean,,$@)/,$(TEST_TARGET)) \
	$(addprefix $(OBJ_DIR)$(subst clean,,$@)/,$(LIBFILES)) \
	$(LIBFILES_TARGET_DIR)/$(call Osbits2dirname,$(subst clean,,$@))/*.a \
	$(addprefix $(OBJ_DIR)$(subst clean,,$@)/,$(OBJFILES)) \
	$(addprefix $(OBJ_DIR)$(subst clean,,$@)/,$(DEP1FILES)) \
	$(addprefix $(OBJ_DIR)$(subst clean,,$@)/,$(DEP2FILES))

.PHONY: dirs
dirs :
	@mkdir -p $(OBJ_DIR)32 $(OBJ_DIR)64

#================================================================
# Building binaries
#================================================================

#The following solution is quite tricky. Explanation:
#We want to automatically create dependency file for each C++ source file.
#Doing it in a makefile is not trivial at all. We define two levels of
#dependency file (d1, d2), d1 is an primary dependency, d2 is the secondary
#dependency.
#The d1 dependency can be considered as direct consequence of modifying cpp
#file, while d2 dependency as indirect consequence of modifying dependent
#header files.
#First, we include each d1 file (by a list), and if it does not exist,
#or older than the cpp file, then it is generated by the cpp->d1 rule.
#Note that if d1 file did not exist before, then it is perfect now, but
#if existed, it can be wrong (because for example an included header file
#has been changed to include another header file, and it is not recognized
#by the cpp->d1 rule).
#Second, we include each d2 file (by a list), and if it does not exist,
#or older than the d1 file, then it is generated by the d1->d2 rule.
#Note that if d2 file has same dependencies as d1 file, then all right, but
#if differs, then there can be problem (because for example an included
#header file has been changed to include another header file, and it is not
#recognized by the cpp->d1 rule and the d1->d2 rule). Thus when d2 file is
#written, the same dependencies must be written to d1 file as well.

#This pattern rule generates a dependency(1) file of rule without recipe.
#For example: name.d1 from a C++ source file called name.cpp.
$(OBJ_DIR_OSBITS)/%.d1: %.cpp
#	@echo Debug: START creating d1 from $<
	@mkdir -p $(@D)
	@set -e; rm -f $@; \
		$(CC) -MM $(ALL_CFLAGS) $< > $@.$$$$ && \
		sed 's,\($*\)\.o[ :]*,$(@D)\1.d2 : ,g' < $@.$$$$ > $@ && \
		rm -f $@.$$$$
#	@echo Debug: END creating d1 from $<

#This pattern rule generates a dependency(2) file of rule without recipe.
#For example: name.d2 from a C++ source file called name.cpp.
$(OBJ_DIR_OSBITS)/%.d2: $(OBJ_DIR_OSBITS)/%.d1
#	@echo Debug: START creating d2 from $<
	@mkdir -p $(@D)
	@set -e; rm -f $@; \
		$(CC) -MM $(ALL_CFLAGS) $(subst .d1,.cpp,$(<F)) > $@.$$$$; \
		sed 's,\($*\)\.o[ :]*,$@ : ,g' < $@.$$$$ > $<; \
		sed 's,\($*\)\.o[ :]*,$(@D)/\1.o : ,g' < $@.$$$$ > $@; \
		rm -f $@.$$$$
#	@echo Debug: END creating d2 from $<

#This pattern rule contains the real action for C++ source files.
$(OBJ_DIR_OSBITS)/%.o: %.cpp
	$(MAKEOBJECT)

$(OBJ_DIR_OSBITS)/test: $(OBJFILES_OSBITS)
	$(LDENV) $(CC) $(CXXFLAGS) $(CPPFLAGS) -m$(OSBITS) -o $@ \
	$(OBJFILES_OSBITS) $(LDFLAGS) $(LIBS)

$(OBJ_DIR_OSBITS)/$(LIBFILES) : $(OBJFILES_OSBITS)
	$(AR) cr $@ $^

# END OF FILE
